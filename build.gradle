plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            arg "-mixin.config=" + mod_id + ".mixins.json"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
    }
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    //本地依赖
    flatDir {
        dir 'libs'
    }
}

dependencies {
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //implementation fg.deobf("blank:jei-1.20.1:forge-15.20.0.112")
    implementation fg.deobf("blank:alexscaves-1.20.1:1")
    implementation fg.deobf("blank:alshanex_familiars-1.20.1:1")
    implementation fg.deobf("blank:attributeslib-1.20.1:1")
    implementation fg.deobf("blank:art_of_forging-1.20.1:1")
    implementation fg.deobf("blank:caelus-1.20.1:1")
    implementation fg.deobf("blank:citadel-1.20.1:1")
    implementation fg.deobf("blank:cobweb-1.20.1:1")
    implementation fg.deobf("blank:curios-1.20.1:1")
    implementation fg.deobf("blank:mmmmmmmmmmmm-1.20.1:1")
    implementation fg.deobf("blank:geckolib-1.20.1:1")
    implementation fg.deobf("blank:irons_spellbooks-1.20.1:1")
    implementation fg.deobf("blank:jade-1.20.1:1")
    implementation fg.deobf("blank:jei-1.20.1:1")
    implementation fg.deobf("blank:cataclysm-1.20.1:1")
    implementation fg.deobf("blank:lionfishapi-1.20.1:1")
    implementation fg.deobf("blank:lodestone-1.20.1:1")
    implementation fg.deobf("blank:malum-1.20.1:1")
    implementation fg.deobf("blank:moonlight-1.20.1:1")
    implementation fg.deobf("blank:mutil-1.20.1:1")
    implementation fg.deobf("blank:playeranimator-1.20.1:1")
    implementation fg.deobf("blank:placebo-1.20.1:1")
    implementation fg.deobf("blank:soul-fire-d-1.20.1:1")
    implementation fg.deobf("blank:tetra-1.20.1:1")
    implementation fg.deobf("blank:traveloptics-1.20.1:1")
    implementation fg.deobf("blank:citadel-1.20.1:1")
    implementation fg.deobf("blank:ars_nouveau-1.20.1:1")
    implementation fg.deobf("blank:patchouli-1.20.1:1")
    implementation fg.deobf("blank:rhino-1.20.1:1")
    implementation fg.deobf("blank:architectury-1.20.1:1")
    implementation fg.deobf("blank:kubejs-1.20.1:1")
    implementation fg.deobf("blank:eidolon_repraised-1.20.1:1")
    implementation fg.deobf("blank:biomancy-1.20.1:1")
    implementation fg.deobf("blank:iceandfire-1.20.1:1")
    //implementation fg.deobf("blank:tetranomicon-1.20.1:1")
    implementation fg.deobf("blank:enigmaticlegacy-1.20.1:1")
    implementation fg.deobf("blank:botania-1.20.1:1")
    implementation fg.deobf("blank:obscure_api-1.20.1:1")
    implementation fg.deobf("blank:aquamirae-1.20.1:1")
    implementation fg.deobf("blank:l2library-1.20.1:1")
    implementation fg.deobf("blank:l2complements-1.20.1:1")
    implementation fg.deobf("blank:l2hostility-1.20.1:1")
    implementation fg.deobf("blank:torchesbecomesunlight-1.20.1:1")
    implementation fg.deobf("blank:caerula_arbor-1.20.1:1")
    implementation fg.deobf("blank:tetra_re_enlarged-1.20.1:1")
    implementation fg.deobf("blank:tacz-1.20.1:1")
    implementation fg.deobf("blank:relics-1.20.1:1")
    implementation fg.deobf("blank:octolib-1.20.1:1")
    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}
// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
apply plugin: 'org.spongepowered.mixin'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
    debug.verbose = true
    debug.export = true
}